#!/bin/bash
#    
#- Title            newfunc
#- Creation date    07-17-2015
#- Author           Jean Michel Cote
#- Github           https://github.com/jeanmichelcote/scripts/
#- Version          1.0
# 
#: Usage:           newfunc [Options] <arguments>
#:   
#: Description:     Use to create a new function that will be appended to a
#:                  .function file, create it if it does not exist and 
#:                  source it in .bash_profile.
#: 
#: [Options]:   -h  Prints out this usage block.
#:              -c  Prints out the credentials.
#:   
#: <Arguments>:     Accepts a minimum of 2 arguments.
#:                  Enclose in double quotes when typing more than one word.
#:      
#:              $1  Function's name
#:              $2  Function's description
#:              $3  Options and arguments for your new function.
#:                  Option flags must be entered first and then be followed
#:                  by a space and a description for the flag.
#:                  Simple arguments should be appended and separated by
#:                  single spaces.  
#: 
#: (example):       newfunc myfunc "Use to break everything" -h hammer hard
#:                 

source ~/.functions

while getopts ":hc" opt; do
  case $opt in
    h) printusage -H && exit 0          ;;
    c) printusage -C && exit 0          ;;
    *) printusage -H >&2 && exit 1      ;;
  esac
done
shift $(( OPTIND - 1))

[[ "$#" -lt 2 ]] && printusage -H >&2 && exit 1

# EDITABLES #################################
target=".functions"                         #
dest="${HOME}"                              #
# target="tmp2.txt"                         #
# dest="${HOME}/tmp"
newdotfiles=($target .bashrc .bash_profile) #
# END EDITABLES #############################

name=$(sanitize "$1")
desc=$(sanitize "$2")

nameAlreadyUsed -f "$name"
 
# Gets our new function's parameters in
argarr=()
for arg in "${@:3}"; do
  argarr=("${argarr[@]}" "$arg")
done

createIfAbsent() {
  # $1 = full path to the destination directory, 
  # all the following ones are the actual dotfiles to generate
  local destindir="$1"
  shift
  for file in "$@"; do
    if [[ ! -f "${destindir}/${file}" ]]; then
     msg_info "Creating ${destindir}/${file} file..."
     touch "${destindir}/${file}"
    fi
  done
  unset file destindir
}

createIfAbsent "$dest" "${newdotfiles[@]}"

# Sources .bash_profile in .bashrc only if it isn't sourced already
line1=$( grep "source ${dest}/.bash_profile" "${dest}/.bashrc" )
if [[ ! "$line1" ]]; then
  msg_info "Sourcing ${dest}/.bash_profile"
  printf "%b\n" "[ -n \"\$PS1\" ] && source ${dest}/.bash_profile" \
  >> "${dest}/.bashrc"
fi

# Sources .functions in .bash_profile only if it isn't sourced already
line2=$( grep "source ${dest}" "${dest}"/.bash_profile )
if [[ ! $line2 ]]; then
  msg_info "Sourcing ${dest}"
  printf "%b\n" "[ -r ${dest}/${target} ] && [ -f ${dest}/${target} ] && source ${dest}/${target}" >> "${dest}/.bash_profile"
fi

cat - "${dest}/${target}" > "${dest}/${target}.new" <<EOF
$name() {
$( usageblock "$name" "$desc" "${argarr[@]}" )

  source ~/.functions

  local OPTIND

  while getopts ":hc" opt; do
    case \$opt in
      h) printusage -H && return 0        ;;
      c) printusage -C && return 0        ;;
      *) printusage -H >&2 && return 1    ;;
    esac
  done
  shift \$(( OPTIND - 1))

  [[ \$# -ne ${#argarr[@]} ]] && printusage -H >&2 && return 1
} 

EOF

#bail "Script could not execute properly. Could not copy Heredoc."

# Creates new empty function template and prepend it to .functions file
msg_info "Function ${name} created in ${dest}/${target}..."

mv "${dest}/${target}" "${dest}/${target}.bak" && \
mv "${dest}/${target}.new" "${dest}/${target}"
#rm "${dest}/${target}.bak"

msg_info "Opening ${dest}/${target} in ${EDITOR}"
"$EDITOR" "$dest/${target}"